/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hola.myrpc.dubbo.api.dthrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-04-05")
public class MoviePersonInfoVo implements org.apache.thrift.TBase<MoviePersonInfoVo, MoviePersonInfoVo._Fields>, java.io.Serializable, Cloneable, Comparable<MoviePersonInfoVo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MoviePersonInfoVo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("img", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEATHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("deathday", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("rating", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField INTRO_FIELD_DESC = new org.apache.thrift.protocol.TField("intro", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROFESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("profession", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CONSTELLATION_FIELD_DESC = new org.apache.thrift.protocol.TField("constellation", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField VALID_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("validState", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MoviePersonInfoVoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MoviePersonInfoVoTupleSchemeFactory();

  public int id; // optional
  public String name; // optional
  public String img; // optional
  public int sex; // optional
  public String birthday; // optional
  public String deathday; // optional
  public double rating; // optional
  public String intro; // optional
  public String address; // optional
  public String profession; // optional
  public String constellation; // optional
  public int validState; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    IMG((short)3, "img"),
    SEX((short)4, "sex"),
    BIRTHDAY((short)5, "birthday"),
    DEATHDAY((short)6, "deathday"),
    RATING((short)7, "rating"),
    INTRO((short)8, "intro"),
    ADDRESS((short)9, "address"),
    PROFESSION((short)10, "profession"),
    CONSTELLATION((short)11, "constellation"),
    VALID_STATE((short)12, "validState");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // IMG
          return IMG;
        case 4: // SEX
          return SEX;
        case 5: // BIRTHDAY
          return BIRTHDAY;
        case 6: // DEATHDAY
          return DEATHDAY;
        case 7: // RATING
          return RATING;
        case 8: // INTRO
          return INTRO;
        case 9: // ADDRESS
          return ADDRESS;
        case 10: // PROFESSION
          return PROFESSION;
        case 11: // CONSTELLATION
          return CONSTELLATION;
        case 12: // VALID_STATE
          return VALID_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __SEX_ISSET_ID = 1;
  private static final int __RATING_ISSET_ID = 2;
  private static final int __VALIDSTATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID, _Fields.NAME, _Fields.IMG, _Fields.SEX, _Fields.BIRTHDAY, _Fields.DEATHDAY, _Fields.RATING, _Fields.INTRO, _Fields.ADDRESS, _Fields.PROFESSION, _Fields.CONSTELLATION, _Fields.VALID_STATE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG, new org.apache.thrift.meta_data.FieldMetaData("img", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEATHDAY, new org.apache.thrift.meta_data.FieldMetaData("deathday", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATING, new org.apache.thrift.meta_data.FieldMetaData("rating", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTRO, new org.apache.thrift.meta_data.FieldMetaData("intro", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROFESSION, new org.apache.thrift.meta_data.FieldMetaData("profession", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSTELLATION, new org.apache.thrift.meta_data.FieldMetaData("constellation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALID_STATE, new org.apache.thrift.meta_data.FieldMetaData("validState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MoviePersonInfoVo.class, metaDataMap);
  }

  public MoviePersonInfoVo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MoviePersonInfoVo(MoviePersonInfoVo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetImg()) {
      this.img = other.img;
    }
    this.sex = other.sex;
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    if (other.isSetDeathday()) {
      this.deathday = other.deathday;
    }
    this.rating = other.rating;
    if (other.isSetIntro()) {
      this.intro = other.intro;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetProfession()) {
      this.profession = other.profession;
    }
    if (other.isSetConstellation()) {
      this.constellation = other.constellation;
    }
    this.validState = other.validState;
  }

  public MoviePersonInfoVo deepCopy() {
    return new MoviePersonInfoVo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.name = null;
    this.img = null;
    setSexIsSet(false);
    this.sex = 0;
    this.birthday = null;
    this.deathday = null;
    setRatingIsSet(false);
    this.rating = 0.0;
    this.intro = null;
    this.address = null;
    this.profession = null;
    this.constellation = null;
    setValidStateIsSet(false);
    this.validState = 0;
  }

  public int getId() {
    return this.id;
  }

  public MoviePersonInfoVo setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public MoviePersonInfoVo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getImg() {
    return this.img;
  }

  public MoviePersonInfoVo setImg(String img) {
    this.img = img;
    return this;
  }

  public void unsetImg() {
    this.img = null;
  }

  /** Returns true if field img is set (has been assigned a value) and false otherwise */
  public boolean isSetImg() {
    return this.img != null;
  }

  public void setImgIsSet(boolean value) {
    if (!value) {
      this.img = null;
    }
  }

  public int getSex() {
    return this.sex;
  }

  public MoviePersonInfoVo setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getBirthday() {
    return this.birthday;
  }

  public MoviePersonInfoVo setBirthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public String getDeathday() {
    return this.deathday;
  }

  public MoviePersonInfoVo setDeathday(String deathday) {
    this.deathday = deathday;
    return this;
  }

  public void unsetDeathday() {
    this.deathday = null;
  }

  /** Returns true if field deathday is set (has been assigned a value) and false otherwise */
  public boolean isSetDeathday() {
    return this.deathday != null;
  }

  public void setDeathdayIsSet(boolean value) {
    if (!value) {
      this.deathday = null;
    }
  }

  public double getRating() {
    return this.rating;
  }

  public MoviePersonInfoVo setRating(double rating) {
    this.rating = rating;
    setRatingIsSet(true);
    return this;
  }

  public void unsetRating() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RATING_ISSET_ID);
  }

  /** Returns true if field rating is set (has been assigned a value) and false otherwise */
  public boolean isSetRating() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RATING_ISSET_ID);
  }

  public void setRatingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RATING_ISSET_ID, value);
  }

  public String getIntro() {
    return this.intro;
  }

  public MoviePersonInfoVo setIntro(String intro) {
    this.intro = intro;
    return this;
  }

  public void unsetIntro() {
    this.intro = null;
  }

  /** Returns true if field intro is set (has been assigned a value) and false otherwise */
  public boolean isSetIntro() {
    return this.intro != null;
  }

  public void setIntroIsSet(boolean value) {
    if (!value) {
      this.intro = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public MoviePersonInfoVo setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getProfession() {
    return this.profession;
  }

  public MoviePersonInfoVo setProfession(String profession) {
    this.profession = profession;
    return this;
  }

  public void unsetProfession() {
    this.profession = null;
  }

  /** Returns true if field profession is set (has been assigned a value) and false otherwise */
  public boolean isSetProfession() {
    return this.profession != null;
  }

  public void setProfessionIsSet(boolean value) {
    if (!value) {
      this.profession = null;
    }
  }

  public String getConstellation() {
    return this.constellation;
  }

  public MoviePersonInfoVo setConstellation(String constellation) {
    this.constellation = constellation;
    return this;
  }

  public void unsetConstellation() {
    this.constellation = null;
  }

  /** Returns true if field constellation is set (has been assigned a value) and false otherwise */
  public boolean isSetConstellation() {
    return this.constellation != null;
  }

  public void setConstellationIsSet(boolean value) {
    if (!value) {
      this.constellation = null;
    }
  }

  public int getValidState() {
    return this.validState;
  }

  public MoviePersonInfoVo setValidState(int validState) {
    this.validState = validState;
    setValidStateIsSet(true);
    return this;
  }

  public void unsetValidState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALIDSTATE_ISSET_ID);
  }

  /** Returns true if field validState is set (has been assigned a value) and false otherwise */
  public boolean isSetValidState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALIDSTATE_ISSET_ID);
  }

  public void setValidStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALIDSTATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case IMG:
      if (value == null) {
        unsetImg();
      } else {
        setImg((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case DEATHDAY:
      if (value == null) {
        unsetDeathday();
      } else {
        setDeathday((String)value);
      }
      break;

    case RATING:
      if (value == null) {
        unsetRating();
      } else {
        setRating((Double)value);
      }
      break;

    case INTRO:
      if (value == null) {
        unsetIntro();
      } else {
        setIntro((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case PROFESSION:
      if (value == null) {
        unsetProfession();
      } else {
        setProfession((String)value);
      }
      break;

    case CONSTELLATION:
      if (value == null) {
        unsetConstellation();
      } else {
        setConstellation((String)value);
      }
      break;

    case VALID_STATE:
      if (value == null) {
        unsetValidState();
      } else {
        setValidState((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case IMG:
      return getImg();

    case SEX:
      return getSex();

    case BIRTHDAY:
      return getBirthday();

    case DEATHDAY:
      return getDeathday();

    case RATING:
      return getRating();

    case INTRO:
      return getIntro();

    case ADDRESS:
      return getAddress();

    case PROFESSION:
      return getProfession();

    case CONSTELLATION:
      return getConstellation();

    case VALID_STATE:
      return getValidState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case IMG:
      return isSetImg();
    case SEX:
      return isSetSex();
    case BIRTHDAY:
      return isSetBirthday();
    case DEATHDAY:
      return isSetDeathday();
    case RATING:
      return isSetRating();
    case INTRO:
      return isSetIntro();
    case ADDRESS:
      return isSetAddress();
    case PROFESSION:
      return isSetProfession();
    case CONSTELLATION:
      return isSetConstellation();
    case VALID_STATE:
      return isSetValidState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MoviePersonInfoVo)
      return this.equals((MoviePersonInfoVo)that);
    return false;
  }

  public boolean equals(MoviePersonInfoVo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_img = true && this.isSetImg();
    boolean that_present_img = true && that.isSetImg();
    if (this_present_img || that_present_img) {
      if (!(this_present_img && that_present_img))
        return false;
      if (!this.img.equals(that.img))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_deathday = true && this.isSetDeathday();
    boolean that_present_deathday = true && that.isSetDeathday();
    if (this_present_deathday || that_present_deathday) {
      if (!(this_present_deathday && that_present_deathday))
        return false;
      if (!this.deathday.equals(that.deathday))
        return false;
    }

    boolean this_present_rating = true && this.isSetRating();
    boolean that_present_rating = true && that.isSetRating();
    if (this_present_rating || that_present_rating) {
      if (!(this_present_rating && that_present_rating))
        return false;
      if (this.rating != that.rating)
        return false;
    }

    boolean this_present_intro = true && this.isSetIntro();
    boolean that_present_intro = true && that.isSetIntro();
    if (this_present_intro || that_present_intro) {
      if (!(this_present_intro && that_present_intro))
        return false;
      if (!this.intro.equals(that.intro))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_profession = true && this.isSetProfession();
    boolean that_present_profession = true && that.isSetProfession();
    if (this_present_profession || that_present_profession) {
      if (!(this_present_profession && that_present_profession))
        return false;
      if (!this.profession.equals(that.profession))
        return false;
    }

    boolean this_present_constellation = true && this.isSetConstellation();
    boolean that_present_constellation = true && that.isSetConstellation();
    if (this_present_constellation || that_present_constellation) {
      if (!(this_present_constellation && that_present_constellation))
        return false;
      if (!this.constellation.equals(that.constellation))
        return false;
    }

    boolean this_present_validState = true && this.isSetValidState();
    boolean that_present_validState = true && that.isSetValidState();
    if (this_present_validState || that_present_validState) {
      if (!(this_present_validState && that_present_validState))
        return false;
      if (this.validState != that.validState)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetImg()) ? 131071 : 524287);
    if (isSetImg())
      hashCode = hashCode * 8191 + img.hashCode();

    hashCode = hashCode * 8191 + ((isSetSex()) ? 131071 : 524287);
    if (isSetSex())
      hashCode = hashCode * 8191 + sex;

    hashCode = hashCode * 8191 + ((isSetBirthday()) ? 131071 : 524287);
    if (isSetBirthday())
      hashCode = hashCode * 8191 + birthday.hashCode();

    hashCode = hashCode * 8191 + ((isSetDeathday()) ? 131071 : 524287);
    if (isSetDeathday())
      hashCode = hashCode * 8191 + deathday.hashCode();

    hashCode = hashCode * 8191 + ((isSetRating()) ? 131071 : 524287);
    if (isSetRating())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rating);

    hashCode = hashCode * 8191 + ((isSetIntro()) ? 131071 : 524287);
    if (isSetIntro())
      hashCode = hashCode * 8191 + intro.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetProfession()) ? 131071 : 524287);
    if (isSetProfession())
      hashCode = hashCode * 8191 + profession.hashCode();

    hashCode = hashCode * 8191 + ((isSetConstellation()) ? 131071 : 524287);
    if (isSetConstellation())
      hashCode = hashCode * 8191 + constellation.hashCode();

    hashCode = hashCode * 8191 + ((isSetValidState()) ? 131071 : 524287);
    if (isSetValidState())
      hashCode = hashCode * 8191 + validState;

    return hashCode;
  }

  @Override
  public int compareTo(MoviePersonInfoVo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg()).compareTo(other.isSetImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img, other.img);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeathday()).compareTo(other.isSetDeathday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeathday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deathday, other.deathday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRating()).compareTo(other.isSetRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rating, other.rating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntro()).compareTo(other.isSetIntro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intro, other.intro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProfession()).compareTo(other.isSetProfession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profession, other.profession);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstellation()).compareTo(other.isSetConstellation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstellation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constellation, other.constellation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidState()).compareTo(other.isSetValidState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validState, other.validState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MoviePersonInfoVo(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      sb.append(this.id);
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetImg()) {
      if (!first) sb.append(", ");
      sb.append("img:");
      if (this.img == null) {
        sb.append("null");
      } else {
        sb.append(this.img);
      }
      first = false;
    }
    if (isSetSex()) {
      if (!first) sb.append(", ");
      sb.append("sex:");
      sb.append(this.sex);
      first = false;
    }
    if (isSetBirthday()) {
      if (!first) sb.append(", ");
      sb.append("birthday:");
      if (this.birthday == null) {
        sb.append("null");
      } else {
        sb.append(this.birthday);
      }
      first = false;
    }
    if (isSetDeathday()) {
      if (!first) sb.append(", ");
      sb.append("deathday:");
      if (this.deathday == null) {
        sb.append("null");
      } else {
        sb.append(this.deathday);
      }
      first = false;
    }
    if (isSetRating()) {
      if (!first) sb.append(", ");
      sb.append("rating:");
      sb.append(this.rating);
      first = false;
    }
    if (isSetIntro()) {
      if (!first) sb.append(", ");
      sb.append("intro:");
      if (this.intro == null) {
        sb.append("null");
      } else {
        sb.append(this.intro);
      }
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetProfession()) {
      if (!first) sb.append(", ");
      sb.append("profession:");
      if (this.profession == null) {
        sb.append("null");
      } else {
        sb.append(this.profession);
      }
      first = false;
    }
    if (isSetConstellation()) {
      if (!first) sb.append(", ");
      sb.append("constellation:");
      if (this.constellation == null) {
        sb.append("null");
      } else {
        sb.append(this.constellation);
      }
      first = false;
    }
    if (isSetValidState()) {
      if (!first) sb.append(", ");
      sb.append("validState:");
      sb.append(this.validState);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MoviePersonInfoVoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MoviePersonInfoVoStandardScheme getScheme() {
      return new MoviePersonInfoVoStandardScheme();
    }
  }

  private static class MoviePersonInfoVoStandardScheme extends org.apache.thrift.scheme.StandardScheme<MoviePersonInfoVo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MoviePersonInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img = iprot.readString();
              struct.setImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEATHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deathday = iprot.readString();
              struct.setDeathdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rating = iprot.readDouble();
              struct.setRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INTRO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intro = iprot.readString();
              struct.setIntroIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROFESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.profession = iprot.readString();
              struct.setProfessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONSTELLATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.constellation = iprot.readString();
              struct.setConstellationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VALID_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.validState = iprot.readI32();
              struct.setValidStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MoviePersonInfoVo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.img != null) {
        if (struct.isSetImg()) {
          oprot.writeFieldBegin(IMG_FIELD_DESC);
          oprot.writeString(struct.img);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSex()) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        if (struct.isSetBirthday()) {
          oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
          oprot.writeString(struct.birthday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.deathday != null) {
        if (struct.isSetDeathday()) {
          oprot.writeFieldBegin(DEATHDAY_FIELD_DESC);
          oprot.writeString(struct.deathday);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRating()) {
        oprot.writeFieldBegin(RATING_FIELD_DESC);
        oprot.writeDouble(struct.rating);
        oprot.writeFieldEnd();
      }
      if (struct.intro != null) {
        if (struct.isSetIntro()) {
          oprot.writeFieldBegin(INTRO_FIELD_DESC);
          oprot.writeString(struct.intro);
          oprot.writeFieldEnd();
        }
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.profession != null) {
        if (struct.isSetProfession()) {
          oprot.writeFieldBegin(PROFESSION_FIELD_DESC);
          oprot.writeString(struct.profession);
          oprot.writeFieldEnd();
        }
      }
      if (struct.constellation != null) {
        if (struct.isSetConstellation()) {
          oprot.writeFieldBegin(CONSTELLATION_FIELD_DESC);
          oprot.writeString(struct.constellation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetValidState()) {
        oprot.writeFieldBegin(VALID_STATE_FIELD_DESC);
        oprot.writeI32(struct.validState);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MoviePersonInfoVoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MoviePersonInfoVoTupleScheme getScheme() {
      return new MoviePersonInfoVoTupleScheme();
    }
  }

  private static class MoviePersonInfoVoTupleScheme extends org.apache.thrift.scheme.TupleScheme<MoviePersonInfoVo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MoviePersonInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetImg()) {
        optionals.set(2);
      }
      if (struct.isSetSex()) {
        optionals.set(3);
      }
      if (struct.isSetBirthday()) {
        optionals.set(4);
      }
      if (struct.isSetDeathday()) {
        optionals.set(5);
      }
      if (struct.isSetRating()) {
        optionals.set(6);
      }
      if (struct.isSetIntro()) {
        optionals.set(7);
      }
      if (struct.isSetAddress()) {
        optionals.set(8);
      }
      if (struct.isSetProfession()) {
        optionals.set(9);
      }
      if (struct.isSetConstellation()) {
        optionals.set(10);
      }
      if (struct.isSetValidState()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetImg()) {
        oprot.writeString(struct.img);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetDeathday()) {
        oprot.writeString(struct.deathday);
      }
      if (struct.isSetRating()) {
        oprot.writeDouble(struct.rating);
      }
      if (struct.isSetIntro()) {
        oprot.writeString(struct.intro);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetProfession()) {
        oprot.writeString(struct.profession);
      }
      if (struct.isSetConstellation()) {
        oprot.writeString(struct.constellation);
      }
      if (struct.isSetValidState()) {
        oprot.writeI32(struct.validState);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MoviePersonInfoVo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.img = iprot.readString();
        struct.setImgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.deathday = iprot.readString();
        struct.setDeathdayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rating = iprot.readDouble();
        struct.setRatingIsSet(true);
      }
      if (incoming.get(7)) {
        struct.intro = iprot.readString();
        struct.setIntroIsSet(true);
      }
      if (incoming.get(8)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(9)) {
        struct.profession = iprot.readString();
        struct.setProfessionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.constellation = iprot.readString();
        struct.setConstellationIsSet(true);
      }
      if (incoming.get(11)) {
        struct.validState = iprot.readI32();
        struct.setValidStateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

